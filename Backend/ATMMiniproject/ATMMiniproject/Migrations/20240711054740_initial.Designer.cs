// <auto-generated />
using System;
using ATM_MiniProject.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ATMMiniproject.Migrations
{
    [DbContext(typeof(ATMContext))]
    [Migration("20240711054740_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ATM_MiniProject.Context.Account", b =>
                {
                    b.Property<int>("AcctId")
                        .HasColumnType("int");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.HasKey("AcctId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ATM_MiniProject.Context.DebitCardDetails", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"), 1L, 1);

                    b.Property<int>("AcctId")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PinHashed")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CardId");

                    b.ToTable("DebitCardDetails");
                });

            modelBuilder.Entity("ATM_MiniProject.Models.ATMTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("AcctId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("ATMTransactions");
                });

            modelBuilder.Entity("ATM_MiniProject.Context.Account", b =>
                {
                    b.HasOne("ATM_MiniProject.Context.DebitCardDetails", "DebitCardDetails")
                        .WithOne("Account")
                        .HasForeignKey("ATM_MiniProject.Context.Account", "AcctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DebitCardDetails");
                });

            modelBuilder.Entity("ATM_MiniProject.Models.ATMTransaction", b =>
                {
                    b.HasOne("ATM_MiniProject.Context.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATM_MiniProject.Context.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ATM_MiniProject.Context.DebitCardDetails", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
